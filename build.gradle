buildscript {
    repositories {
        mavenLocal()
        mavenCentral()

        maven {
            //TODO Change URL and remove allowInsecureProtocol later
            url "http://localhost:8081/repository/maven-releases/"
            allowInsecureProtocol = true
            credentials {
                username ""
                password ""
            }
        }
    }
}

plugins {
    id "java"
    id "application"
    id "jacoco"
    id "org.springframework.boot" version "2.6.6"
    id "io.spring.dependency-management" version "1.0.15.RELEASE"
    id "org.liquibase.gradle"
    id "checkstyle"
}

group = "com.nals.rmt-auction"
version = "0.0.1"
description = "rmt-auction"

sourceCompatibility = 11
targetCompatibility = 11
assert System.properties["java.specification.version"] == "11"


if (project.hasProperty("prod") || project.hasProperty("gae")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

defaultTasks "bootRun"

application {
    mainClass = "com.nals.auction.RmtAuctionApp"
}

jar {
    enabled = false
}

test {
    exclude "**/CucumberTest*"
    reports.html.required = true
    testLogging {
        events = ["PASSED", "SKIPPED", "FAILED"]
        exceptionFormat = 'full'
    }
}

check.dependsOn test
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

project.ext.diffChangelogFile = "src/main/resources/config/liquibase/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.xml"

liquibase {
    activities {
        main {
            driver "com.mysql.cj.jdbc.Driver"
            url "jdbc:mysql://localhost:3306/rmt-auction"
            username "root"
            password "r00t"
            changeLogFile "src/main/resources/config/liquibase/master.xml"
            defaultSchemaName "orm-auction"
            logLevel "debug"
            classpath "src/main/resources/"
        }
        diffLog {
            driver "com.mysql.cj.jdbc.Driver"
            url "jdbc:mysql://localhost:3306/auction"
            username "root"
            password "r00t"
            changeLogFile project.ext.diffChangelogFile
            referenceUrl "hibernate:spring:com.nals.auction.domain?dialect=org.hibernate.dialect.MySQL8Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
            defaultSchemaName "auction"
            logLevel "debug"
            classpath "$buildDir/classes/java/main"
        }
    }

    runList = project.ext.runList
}

checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    configProperties = ["suppressionFile": project(":").file("config/checkstyle/suppressions.xml")]
    toolVersion = "${checkstyleVersion}"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        //TODO Change URL and remove allowInsecureProtocol later
        url "http://localhost:8081/repository/maven-releases/"
        allowInsecureProtocol = true
        credentials {
            username ""
            password ""
        }
    }
}

dependencies {
    if (!project.hasProperty("gae")) {
        implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")
    }

    implementation "tech.jhipster:jhipster-framework"

    implementation "com.fasterxml.jackson.module:jackson-module-afterburner"
    implementation "javax.annotation:javax.annotation-api"
    implementation "org.apache.commons:commons-lang3"
    implementation "org.apache.commons:commons-collections4:${collections4Version}"
    implementation "org.hibernate:hibernate-core"
    implementation "org.hibernate:hibernate-envers"
    implementation "org.hibernate:hibernate-entitymanager"
    implementation "org.hibernate.validator:hibernate-validator"
    implementation "org.liquibase:liquibase-core"

    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"

    implementation "io.jsonwebtoken:jjwt-api"
    implementation "io.jsonwebtoken:jjwt-impl"
    implementation "io.jsonwebtoken:jjwt-jackson"
    implementation "io.springfox:springfox-oas:${springfoxOasVersion}"
    implementation "io.springfox:springfox-swagger2:${springfoxSwagger2Version}"
    implementation "io.springfox:springfox-bean-validators:${springfoxBeanValidatorsVersion}"
    implementation "mysql:mysql-connector-java"
    implementation "org.apache.httpcomponents:httpclient"
    implementation "org.zalando:problem-spring-web:${zalandoProblemSpringWebVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.apache.commons:commons-math:${mathVersion}"
    implementation("org.springdoc:springdoc-openapi-webmvc-core")
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation "org.springframework.boot:spring-boot-starter-webflux"

    implementation "com.nals.rmt-common-messages:rmt-common-messages:${rmtCommonMessagesVersion}"
    annotationProcessor "com.nals.rmt-common-messages:rmt-common-messages:${rmtCommonMessagesVersion}"

    implementation "com.nals.rmt-common-utils:rmt-common-utils:${rmtCommonUtilsVersion}"
    annotationProcessor "com.nals.rmt-common-utils:rmt-common-utils:${rmtCommonUtilsVersion}"

    liquibaseRuntime "mysql:mysql-connector-java"
    liquibaseRuntime "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibaseHibernate5Version}"
    liquibaseRuntime sourceSets.main.compileClasspath

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernateVersion}"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxbRuntimeVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "com.tobedevoured.modelcitizen:core:${modelCitizenVersion}"
    testImplementation("com.github.javafaker:javafaker:${fakerVersion}") {
        exclude module: 'snakeyaml'
    }
    testImplementation "com.h2database:h2"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}"
    developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "7.4.2"
}

compileJava.dependsOn processResources
processResources.dependsOn cleanResources, bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources
