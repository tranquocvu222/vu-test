---
- include_tasks: prepare.yaml

- name: Clone the code repository to the app directory.
  git:
    repo: "{{ git_repo }}"
    dest: "{{ application_path }}"
    version: "{{ branch }}"
    accept_hostkey: yes
    force: yes
    key_file: "{{ user_home_folder }}/.ssh/id_rsa"
    ssh_opts: "-o StrictHostKeyChecking=no"
  register: git

- name: Copy file with owner and permissions
  copy:
    src: "{{ user_home_folder }}/.env"
    dest: "{{ application_path }}/.env"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: '0600'
    remote_src: yes

- name: Replace DB_SCHEMA env
  lineinfile:
    path: "{{ application_path }}/.env"
    regexp: '^DB_SCHEMA='
    line: DB_SCHEMA={{ DB_SCHEMA }}

- name: Fetch codeartifact token
  command: 'aws codeartifact get-authorization-token --domain rmt-dev --domain-owner 430334909132 --region us-east-2 --query authorizationToken --output text'
  register: codeartifact_token
  no_log: true
  
- name: Build image using cache source
  docker_image:
    name: "{{ repos }}"
    tag: latest
    build:
      path: "{{ application_path }}"
      args:
        CODEARTIFACT_AUTH_TOKEN: "{{ codeartifact_token.stdout | trim }}"      
      cache_from:
        - gradle:7.3.3-jdk11
        - openjdk:11.0.13-jre-slim      
    source: build
    force_source: true
    force_tag: true

- name: Start a container with a command
  docker_container:
    name: "{{ repos }}"
    image: "{{ repos }}:latest"
    state: started
    published_ports: "{{ host_port }}:{{ container_port }}"
    restart_policy: always
    recreate: yes
    links: "postgres:postgres"
    env_file: "{{ application_path }}/.env"

- name: Reload nginx
  systemd:
    name: nginx
    state: restarted
    enabled: yes
  become: yes

- name: Check port docker and nginx is running
  wait_for:
    port: "{{ item }}"
    state: started
    delay: 3
  with_items:
    - "{{ container_port }}"
    - "{{ host_port }}"
    - 80
